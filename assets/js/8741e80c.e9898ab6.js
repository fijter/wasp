(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[3001],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||r;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9860:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=n(2122),a=n(9756),r=(n(7294),n(3905)),i=["components"],l={},c="The Solo package",s={unversionedId:"tutorial/01",id:"tutorial/01",isDocsHomePage:!1,title:"The Solo package",description:"Solo is a Go package to write tests for IOTA smart contracts. It allows the",source:"@site/docs/tutorial/01.md",sourceDirName:"tutorial",slug:"/tutorial/01",permalink:"/wasp/docs/tutorial/01",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/tutorial/01.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Exploring IOTA Smart Contracts",permalink:"/wasp/docs/tutorial/readme"},next:{title:"Tokens and the UTXO Ledger",permalink:"/wasp/docs/tutorial/02"}},p=[{value:"First example",id:"first-example",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-solo-package"},"The Solo package"),(0,r.kt)("p",null,"Solo is a Go package to write tests for IOTA smart contracts. It allows the\ndeployment of ISCP chains and smart contracts. It also provides a toolkit for\ninteraction with smart contracts, for manipulation of tokens and ledger accounts\nin an environment that is almost identical to the distributed multi-chain\nenvironment of the ISCP."),(0,r.kt)("p",null,"The Solo package and its GoDoc link ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/tree/master/packages/solo"},"can be found here"),".\nThe GoDocs provides a reference to all Solo calls which can be used in tests\n(not necessarily covered in this tutorial)."),(0,r.kt)("p",null,"Smart contracts are notoriously isolated from the outside world. The effect of\nthe user interaction with a smart contract is normally only observed in its\nstate change. The approach in this tutorial is to explain all main concepts of\nISCP development through loading smart contracts into the ",(0,r.kt)("em",{parentName:"p"},"Solo")," tests, invoking\nits functions and examining state changes."),(0,r.kt)("p",null,"ISCP is currently in active development, so things change and are less than\nperfect. In the current stage the ISCP software is experimental. We expect\nfeedback from the community about hands-on experience. We also expect\ncontribution to the development of ISCP itself, including Rust/Wasm development\nenvironment or, possibly, alternative VM implementations."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Solo")," is not a toy environment. It allows developers to develop and test real\nsmart contracts and entire inter-chain protocols before deploying them on the\ndistributed network."),(0,r.kt)("p",null,"Please follow ",(0,r.kt)("a",{parentName:"p",href:"/wasp/docs/misc/install"},"the link")," for installation instructions."),(0,r.kt)("h2",{id:"first-example"},"First example"),(0,r.kt)("p",null,"The following is an example of a ",(0,r.kt)("em",{parentName:"p"},"Solo")," test. It deploys a new chain and invokes\na function in the ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," contract."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," contract always exists on any chain. So for this example there is no\nneed to deploy any new contract. The test log to the testing output the main\nparameters of the chain, lists names and IDs of all four core contracts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func TestTutorial1(t *testing.T) {\n    env := solo.New(t, false, false)\n    chain := env.NewChain(nil, "ex1")\n    \n    chainID, chainOwnerID, coreContracts := chain.GetInfo()                      // calls view root::GetChainInfo\n    require.EqualValues(t, len(core.AllCoreContractsByHash), len(coreContracts)) // all core contracts deployed by default\n    \n    t.Logf("chain ID: %s", chainID.String())\n    t.Logf("chain owner ID: %s", chainOwnerID.String())\n    for hname, rec := range coreContracts {\n        t.Logf("    Core contract \'%s\': %s", rec.Name, iscp.NewAgentID(chainID.AsAddress(), hname))\n    }\n}\n')),(0,r.kt)("p",null,"The output of the test will be something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"=== RUN   TestTutorial1\n21:46.217   INFO    TestTutorial1   solo/solo.go:140    Solo environment created with initial logical time 2021-04-27 12:21:46.2163941 -0700 PDT m=+0.004574501\n21:46.217   INFO    TestTutorial1   solo/solo.go:187    deploying new chain 'ex1'. ID: $/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU, state controller address: 16e5mTcM9ufZQP37Ki55NhDLacLpTToieKkeqR5my8cu4\n21:46.217   INFO    TestTutorial1   solo/solo.go:189         chain '$/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU'. state controller address: 16e5mTcM9ufZQP37Ki55NhDLacLpTToieKkeqR5my8cu4\n21:46.217   INFO    TestTutorial1   solo/solo.go:190         chain '$/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU'. originator address: 1ECjLLrXYpDKTgtFfft4rFUsd7qkaXQw1Worm4oESzKVi\n21:46.218   INFO    TestTutorial1.ex1   vmcontext/runreq.go:311 eventlog -> '[req] [0]Hy2CGQEi6YHLE3acQoaUe9t2Ej85txq3gG35TCNDas9f: Ok'\n21:46.218   INFO    TestTutorial1   solo/clock.go:35    AdvanceClockBy: logical clock advanced by 2ns\n21:46.218   INFO    TestTutorial1.ex1.m mempool/mempool.go:119  OUT MEMPOOL [0]Hy2CGQEi6YHLE3acQoaUe9t2Ej85txq3gG35TCNDas9f\n21:46.218   INFO    TestTutorial1.ex1   solo/run.go:86  state transition #0 --\x3e #1. Requests in the block: 1. Outputs: 1\n21:46.218   INFO    TestTutorial1   solo/clock.go:44    ClockStep: logical clock advanced by 1ms\n21:46.218   INFO    TestTutorial1.ex1   solo/solo.go:245    chain 'ex1' deployed. Chain ID: $/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU\n21:46.218   INFO    TestTutorial1.ex1   solo/req.go:243 callView: root::getChainInfo\n    tutorial_test.go:24: chain ID: $/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU\n    tutorial_test.go:25: chain owner ID: A/1ECjLLrXYpDKTgtFfft4rFUsd7qkaXQw1Worm4oESzKVi::00000000\n    tutorial_test.go:27:     Core contract '_default': A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::00000000\n    tutorial_test.go:27:     Core contract 'accounts': A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::3c4b5e02\n    tutorial_test.go:27:     Core contract 'blob':     A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::fd91bc63\n    tutorial_test.go:27:     Core contract 'blocklog': A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::f538ef2b\n    tutorial_test.go:27:     Core contract 'eventlog': A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::661aa7d8\n    tutorial_test.go:27:     Core contract 'root':     A/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU::cebf5908\n--- PASS: TestTutorial1 (0.00s)\n")),(0,r.kt)("p",null,"The core contracts listed in the log (",(0,r.kt)("inlineCode",{parentName:"p"},"_default"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"blob"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"blocklog"),"\n, ",(0,r.kt)("inlineCode",{parentName:"p"},"eventlog"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),") are automatically deployed on each new chain. You can see\nthem listed in the test log together with their ",(0,r.kt)("em",{parentName:"p"},"contract IDs"),"."),(0,r.kt)("p",null,"The output fragment in the log ",(0,r.kt)("inlineCode",{parentName:"p"},"state transition #0 --\x3e #1")," means the state of\nthe chain has changed from block index 0 (the origin index of the empty state)\nto block index 1. The state #0 is the empty origin state, the #1 always contains\nall core smart contracts deployed on the chain as well as other variables of\nchain, such as ",(0,r.kt)("em",{parentName:"p"},"chainID")," and ",(0,r.kt)("em",{parentName:"p"},"chain owner ID"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"chain ID")," and ",(0,r.kt)("em",{parentName:"p"},"chain owner ID")," are respectively ID of the deployed\nchain ",(0,r.kt)("inlineCode",{parentName:"p"},"$/iGBuy2yPUpdjX8p8ZXoAkHeFhW7bkrR1dwavWB4CknMU")," and the address (in the\nform of ",(0,r.kt)("em",{parentName:"p"},"agent ID"),") from which the chain was deployed:\n",(0,r.kt)("inlineCode",{parentName:"p"},"A/1ECjLLrXYpDKTgtFfft4rFUsd7qkaXQw1Worm4oESzKVi::00000000")," (the prefixes ",(0,r.kt)("inlineCode",{parentName:"p"},"$/"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"A/")," indicate that what follow are a chain ID and an agent ID, respectively)."))}d.isMDXComponent=!0}}]);