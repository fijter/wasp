(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[5364],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<a;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9145:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),s=["components"],i={},l="Tokens and the UTXO Ledger",d={unversionedId:"tutorial/02",id:"tutorial/02",isDocsHomePage:!1,title:"Tokens and the UTXO Ledger",description:"The Pollen release of the Goshimmer node implements the IOTA UTXO Ledger, a",source:"@site/docs/tutorial/02.md",sourceDirName:"tutorial",slug:"/tutorial/02",permalink:"/wasp/docs/tutorial/02",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/tutorial/02.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The Solo package",permalink:"/wasp/docs/tutorial/01"},next:{title:"Creating a Chain; Core Contracts",permalink:"/wasp/docs/tutorial/03"}},c=[],u={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"tokens-and-the-utxo-ledger"},"Tokens and the UTXO Ledger"),(0,a.kt)("p",null,"The Pollen release of the Goshimmer node implements the IOTA ",(0,a.kt)("em",{parentName:"p"},"UTXO Ledger"),", a\ndistributed ledger of tokens. We won't go into the details of the UTXO Ledger.\nThe introduction of it can be found ",(0,a.kt)("a",{parentName:"p",href:"/wasp/docs/misc/utxo"},"here"),". We only have to\nknow that the UTXO Ledger contains balances of colored tokens locked in\naddresses, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Address: Yk85765qdrwheQ4udj6RihxtPxudTSWF9qYe4NsAfp6K\n   IOTA: 1000\n   Red: 15\n   Green: 200\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"IOTA")," is the color code of IOTA tokens and ",(0,a.kt)("inlineCode",{parentName:"p"},"Red")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Green")," are other\ncolor codes\n(",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/goshimmer/blob/87d0cbb172c1b3432b1dddcbabacd76cad66f1f3/dapps/valuetransfers/packages/balance/color.go#L10"},"color codes are 32-byte hashes, as defined by Goshimmer"),").\nTokens can only be moved on the UTXO Ledger by unlocking the corresponding\naddress with its private key."),(0,a.kt)("p",null,"(In this tutorial we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"private key"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"signature scheme")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"wallet")," as\nsynonyms)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Solo")," environment implements a detailed in-memory UTXO Ledger. For example,\nyou can only move tokens in the ",(0,a.kt)("em",{parentName:"p"},"Solo")," environment by creating and submitting\nvalid and signed transactions. You can also create new wallets on the UTXO\nLedger and request iotas from the faucet to your wallet."),(0,a.kt)("p",null,"The following code shows how to do it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func TestTutorial2(t *testing.T) {\n    env := solo.New(t, false, false)\n    _, userAddress := env.NewKeyPairWithFunds() // create new wallet with solo.Saldo iotas\n    t.Logf("Address of the userWallet is: %s", userAddress)\n    numIotas := env.GetAddressBalance(userAddress, ledgerstate.ColorIOTA) // how many iotas the address contains\n    t.Logf("balance of the userWallet is: %d iota", numIotas)\n    env.AssertAddressBalance(userAddress, ledgerstate.ColorIOTA, solo.Saldo) // assert the address has solo.Saldo iotas\n}\n')),(0,a.kt)("p",null,"The output of the test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'=== RUN   TestTutorial2\n43:03.822   INFO    TestTutorial2   solo/solo.go:140    Solo environment created with initial logical time 2021-04-27 12:43:03.8219457 -0700 PDT m=+0.003645301\n    tutorial_test.go:34: Address of the userWallet is: ED25519Address {\n            Digest: 0xfcf57c46f1dfd678b0a9b37f723a090820c358edaf349b7b97b1ce10d83131c8\n            Base58: "1J2SrD5iV4Lt94ABSiGeegyg5L1CoCyT6i6WFv3Zxg6xP"\n        }\n    tutorial_test.go:36: balance of the userWallet is: 1000000 iota\n--- PASS: TestTutorial2 (0.00s)\n')),(0,a.kt)("p",null,"The UTXO Ledger in ",(0,a.kt)("em",{parentName:"p"},"Solo"),' "lives" in the global environment ',(0,a.kt)("inlineCode",{parentName:"p"},"env")," of the test.\nIt is shared among all chains, deployed on that environment. It serves as a\nmedium for transactions between smart contracts on different chains. This way\n",(0,a.kt)("em",{parentName:"p"},"Solo")," makes it possible to test transacting between chains."),(0,a.kt)("p",null,"Note that in the test above we didn\u2019t deploy any chains: the UTXO Ledger exists\nindependent of any chains."))}p.isMDXComponent=!0}}]);