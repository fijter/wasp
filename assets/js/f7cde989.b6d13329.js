(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[6465],{396:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={},l="Replay protection for off-ledger requests",p={unversionedId:"rfc/replay-off-ledger",id:"rfc/replay-off-ledger",isDocsHomePage:!1,title:"Replay protection for off-ledger requests",description:"Motivation",source:"@site/docs/rfc/replay-off-ledger.md",sourceDirName:"rfc",slug:"/rfc/replay-off-ledger",permalink:"/docs/rfc/replay-off-ledger",editUrl:"https://github.com/iotaledger/chronicle.rs/tree/main/docs/docs/rfc/replay-off-ledger.md",version:"current",frontMatter:{}},c=[{value:"Motivation",id:"motivation",children:[]},{value:"Replay protection by request receipts in the state",id:"replay-protection-by-request-receipts-in-the-state",children:[]},{value:"Naive replay protection with increasing <code>nonce</code>",id:"naive-replay-protection-with-increasing-nonce",children:[]},{value:"Proposed solution",id:"proposed-solution",children:[]}],m={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"replay-protection-for-off-ledger-requests"},"Replay protection for off-ledger requests"),(0,o.kt)("h2",{id:"motivation"},"Motivation"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"off-ledger requests")," (aka ",(0,o.kt)("em",{parentName:"p"},"L2 requests"),") are ISCP requests sent to the smart contract directly\nthrough the Wasp node, a validator node or access node of the chain. In contrast, ",(0,o.kt)("em",{parentName:"p"},"on-ledger requests")," (aka ",(0,o.kt)("em",{parentName:"p"},"L1 requests"),")\nare sent to the smart contract by wrapping the request into the IOTA value transaction and confirming it on the Tangle."),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"on-ledger requests")," thus are protected from replay because UTXO ledger does not allow confirming the same transaction twice."),(0,o.kt)("p",null,"This is not the case with ",(0,o.kt)("em",{parentName:"p"},"off-ledger")," requests which are just data packets broadcast among validator\nand access nodes of the chain. Therefore, the chain must be equipped with a mechanism to prevent attacks when the\nsame ",(0,o.kt)("em",{parentName:"p"},"off-ledger request")," is re-posted again."),(0,o.kt)("h2",{id:"replay-protection-by-request-receipts-in-the-state"},"Replay protection by request receipts in the state"),(0,o.kt)("p",null,"The VM through ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/blocklog/interface.go"},"blocklog core contract")," stores the ID of each request processed\nby the chain in the state, together with the result information (receipt). It can be retrieved by its ",(0,o.kt)("em",{parentName:"p"},"request id"),".\nThe ",(0,o.kt)("em",{parentName:"p"},"blocklog")," core contract also provides a way for fast check if the request was already processed in the past."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/chain/mempool/mempool.go"},"mempool")," checks the state and removes any requests which are already processed.",(0,o.kt)("br",{parentName:"p"}),"\n","The processed request will never appear in the batch proposal during the consensus process."),(0,o.kt)("p",null,"The above is valid for both ",(0,o.kt)("em",{parentName:"p"},"off-ledger")," and ",(0,o.kt)("em",{parentName:"p"},"on-ledger")," requests. It means current implementation is fundamentally protected",(0,o.kt)("br",{parentName:"p"}),"\n","against request replay."),(0,o.kt)("p",null,"However, the problem is with potentially huge logs in the state (in the ",(0,o.kt)("em",{parentName:"p"},"blocklog"),").",(0,o.kt)("br",{parentName:"p"}),"\n","The ISCP design is aiming at high TPS (settled requests per second) to be processed by the ISCP chains, mostly by using mechanism of ",(0,o.kt)("em",{parentName:"p"},"off-ledger")," requests."),(0,o.kt)("p",null,"Let's assume we have 1000 TPS (requests per second). Each request generates a record 50+ bytes long in the ",(0,o.kt)("inlineCode",{parentName:"p"},"blocklog"),".\nThis gives us 50+ kB/s = 180+ MB/hour = 4.3+ GB/day. This isn't sustainable in the long run."),(0,o.kt)("p",null,"It means ISCP chain state will have to be equipped with the mechanism of periodical pruning, i.e. deleting non-critical and obsolete information from the state."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"(In short, the pruning of the state involves extracting witnesses/proofs of existence of the past state\nand then deleting that part from the state. Witnesses may be stored independently of the chain, while the chain will contain\nroot of the witness, i.e. proof of existence of the witness.\nWitnesses may be implemented by Merkle trees or by other techniques, such as polynomial KZG10 (vector) commitments)")),(0,o.kt)("p",null,"In any case, after some time it won't be possible to check in the state if the requests was processed in the past."),(0,o.kt)("p",null,"It creates an attack vector: the same ",(0,o.kt)("em",{parentName:"p"},"off-ledger request")," can be replayed by anyone after some time. This is unacceptable."),(0,o.kt)("h2",{id:"naive-replay-protection-with-increasing-nonce"},"Naive replay protection with increasing ",(0,o.kt)("inlineCode",{parentName:"h2"},"nonce")),(0,o.kt)("p",null,"We may require from each request an ever-increasing value, the ",(0,o.kt)("inlineCode",{parentName:"p"},"nonce"),". The VM would store the maximum value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"nonce"),"\nfor requests with the same sender address. Then the VM would reject any ",(0,o.kt)("em",{parentName:"p"},"off-ledger request")," from this address with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"nonce")," less or equal with the stored maximum. The user will be forced to use incrementally updated value for the ",(0,o.kt)("inlineCode",{parentName:"p"},"nonce")," or\ne.g. timestamp. Once ",(0,o.kt)("inlineCode",{parentName:"p"},"nonce")," is part of the essence of the request and is hashed into the ",(0,o.kt)("em",{parentName:"p"},"request id"),", the replay becomes impossible."),(0,o.kt)("p",null,"The approach would allow an early check by calling a view and checking the ",(0,o.kt)("inlineCode",{parentName:"p"},"blocklog"),". It could be used to prevent spamming/DDoS attacks."),(0,o.kt)("p",null,"The problem, however, is that with the ISCP consensus, we cannot guarantee the requests will be included in the block in\nthe order in which they arrived. Actually, the order is intentionally random.",(0,o.kt)("br",{parentName:"p"}),"\n","For example, if a client sends 5 requests at once, with correct sequence of nonces ",(0,o.kt)("inlineCode",{parentName:"p"},"1, 2, 3, 4, 5"),", the requests may be\npicked and processed in two separate batches ",(0,o.kt)("inlineCode",{parentName:"p"},"1,2,5")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"3,4"),".\nIn this case requests ",(0,o.kt)("inlineCode",{parentName:"p"},"3,4")," will fail for no reason for the user."),(0,o.kt)("h2",{id:"proposed-solution"},"Proposed solution"),(0,o.kt)("p",null,"We propose to combine the two methods: by checking the processed requests in the state and at the same time requiring and enforcing an\nincremental nonce for ",(0,o.kt)("em",{parentName:"p"},"off-ledger requests"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"each ",(0,o.kt)("em",{parentName:"li"},"off-ledger request")," is first checked in the (pruned) state if it wasn't processed before"),(0,o.kt)("li",{parentName:"ul"},"each ",(0,o.kt)("em",{parentName:"li"},"off-ledger request")," is required a ",(0,o.kt)("em",{parentName:"li"},"nonce"),", an ",(0,o.kt)("inlineCode",{parentName:"li"},"uint64")," value. ",(0,o.kt)("em",{parentName:"li"},"On-ledger requests")," don't have a ",(0,o.kt)("inlineCode",{parentName:"li"},"nonce")),(0,o.kt)("li",{parentName:"ul"},"for each new ",(0,o.kt)("em",{parentName:"li"},"off-ledger request")," the VM will keep a value ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed")," in the state next to the sender's address the following way:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if the ",(0,o.kt)("inlineCode",{parentName:"li"},"nonce")," of the request is greater than the existing ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed"),", it stores ",(0,o.kt)("inlineCode",{parentName:"li"},"nonce")," as new ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed")),(0,o.kt)("li",{parentName:"ul"},"otherwise, it increments ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed")," by 1"))),(0,o.kt)("li",{parentName:"ul"},"the VM will validate any request the following way:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"if ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed")," < ",(0,o.kt)("inlineCode",{parentName:"li"},"NConst")," the request is ",(0,o.kt)("strong",{parentName:"li"},"valid")),(0,o.kt)("li",{parentName:"ul"},"otherwise, if ",(0,o.kt)("inlineCode",{parentName:"li"},"nonce")," > ",(0,o.kt)("inlineCode",{parentName:"li"},"MaxAssumed")," - ",(0,o.kt)("inlineCode",{parentName:"li"},"NConst"),", the request is ",(0,o.kt)("strong",{parentName:"li"},"valid")),(0,o.kt)("li",{parentName:"ul"},"otherwise, the request is deemed ",(0,o.kt)("strong",{parentName:"li"},"invalid")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NConst")," is a global static constant"),(0,o.kt)("li",{parentName:"ul"},"chain guarantee at least last ",(0,o.kt)("inlineCode",{parentName:"li"},"NConst")," requests not pruned and therefore present in the ",(0,o.kt)("inlineCode",{parentName:"li"},"blocklog")," state for each address")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NConst")," also known as ",(0,o.kt)("inlineCode",{parentName:"p"},"OffLedgerNonceStrictOrderTolerance"),". It must be at least be a theoretic maximum number of\n",(0,o.kt)("em",{parentName:"p"},"offledger requests")," from one address in one batch, i.e. with ",(0,o.kt)("inlineCode",{parentName:"p"},"NConst")," number of requests in one batch the order is ignored.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"10000")," is a reasonable value."),(0,o.kt)("p",null,"The approach will enforce ever-growing ",(0,o.kt)("inlineCode",{parentName:"p"},"nonces"),". The user will be forced to use incremental nonces or use for example a timestamp.\nThe VM will not allow too old ",(0,o.kt)("inlineCode",{parentName:"p"},"nonces")," (too far in the past), but otherwise a local sequence is not enforced and is assumed to be random."))}u.isMDXComponent=!0},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);